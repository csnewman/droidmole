syntax = "proto3";

option go_package = "./protocol";

import "google/protobuf/empty.proto";

// The AgentController service exposes controls and state to enable emulator management
service AgentController {
  // Streams the state of the agent process.
  // An initial value will be immediately produced with the current agent state. Subsequent values may indicate a change
  // in the agent state, however this is not guaranteed and the same state can be delivered multiple times.
  rpc streamState(google.protobuf.Empty) returns (stream AgentState);

  // Requests the emulator starts. An error will be returned if the emulator is already running.
  rpc startEmulator(StartEmulatorRequest) returns (google.protobuf.Empty);

  // Requests the emulator exits. An error will be returned if the emulator is not running.
  rpc stopEmulator(StopEmulatorRequest) returns (google.protobuf.Empty);

  // Streams the display in the requested format.
  // An initial value will be immediately produced with the current display content. This stream can and should be
  // started before the emulator is started to ensure no frames are missed. The stream will is persistent between
  // emulator restarts.
  rpc streamDisplay(StreamDisplayRequest) returns (stream DisplayFrame);

  // Streams the system log (kernel messages).
  // Previous messages are not returned. This stream can and should be started before the emulator is started to ensure
  // no messages are missed. The stream will is persistent between emulator restarts.
  rpc streamSysLog(google.protobuf.Empty) returns (stream SysLogEntry);

  // Forward an input event to the emulator.
  rpc sendInput(InputRequest) returns (google.protobuf.Empty);

  // Opens an ADB shell to the emulator.
  // Requires that the emulator has reached the "running" state, otherwise an error will be returned.
  // The request stream must start with a single ShellStartRequest message.
  rpc openShell(stream ShellRequest) returns (stream ShellResponse);

  // List all files in a directory.
  // Requires that the emulator has reached the "running" state, otherwise an error will be returned.
  rpc listDirectory(ListDirectoryRequest) returns (ListDirectoryResponse);

  // Stat a given file.
  // Requires that the emulator has reached the "running" state, otherwise an error will be returned.
  rpc statFile(StatFileRequest) returns (StatFileResponse);

  // Pull a file from the emulator.
  // Requires that the emulator has reached the "running" state, otherwise an error will be returned.
  rpc pullFile(PullFileRequest) returns (stream PullFileResponse);

  // Push a file to the emulator.
  // Requires that the emulator has reached the "running" state, otherwise an error will be returned.
  // The request stream must start with a single PushFileStartRequest message.
  rpc pushFile(stream PushFileRequest) returns (google.protobuf.Empty);
}

// AgentState describes the current state of the agent process and the virtual machine being controlled.
message AgentState {
  enum EmulatorState {
    // The emulator failed to start.
    ERROR = 0;
    // The emulator is off.
    OFF = 1;
    // The emulator is booting.
    STARTING = 2;
    // The emulator is running and adb has connected.
    RUNNING = 3;
  }

  // The state of the emulator.
  EmulatorState emulator_state = 1;

  // The error message associated with the error state.
  optional string emulator_error = 2;
}

// Requests the emulator boots with the given configuration.
// Example Settings:
//   Ram: 2048 Cores: 1
//   Display 720x1280 320dpi
message StartEmulatorRequest {
  // Memory in MBs
  uint32 ram_size = 1;
  // Number of cores.
  uint32 core_count = 2;

  // The DPI of the main display.
  uint32 lcd_density = 3;
  // The width of the main display.
  uint32 lcd_width = 4;
  // The height of the main display.
  uint32 lcd_height = 5;

  // Whether to root the adb session on start
  bool root_adb = 6;
}

// Requests the emulator exits.
message StopEmulatorRequest {
  // Kills the emulator without waiting.
  bool force_exit = 1;
}

// Requests the display is streamed with the given configuration.
message StreamDisplayRequest {
  enum FrameFormat {
    // 3 bytes per pixel.
    RGB888 = 0;
    // VP8 codec. Uses intermediate frames.
    VP8 = 1;
  }

  // The frame encoding format.
  FrameFormat format = 1;

  // The maximum number of frames to encode per second.
  // Extra frames will be dropped, with the most recent frame encoded every 1/max_fps seconds.
  // Set to 0 to disable limit.
  uint32 max_fps = 2;

  // How often in milliseconds to encode a keyframe.
  // Set to 0 to only send when required. Not all formats use intermediate frames.
  uint32 keyframe_interval = 3;
}

// A single display frame.
// Based on the format requested, this may not be a keyframe.
// A frame with zero width and height signifies the display is off. Clients should display a blank screen.
// The width and height can change on a keyframe, which can occur if the emulator is restarted with a different
// configuration.
message DisplayFrame {
  // Whether this is a key frame. For some formats, this will always be true.
  bool keyframe = 1;
  // The width of the frame.
  uint32 width = 2;
  // The height of the frame.
  uint32 height = 3;
  // The raw frame data.
  bytes data = 4;
}

// A single line in the syslog.
message SysLogEntry {
  // The raw line.
  string line = 1;
}

// A input event
message InputRequest {
  oneof event {
    TouchEvent touch = 1;
  }
}

// A touch event
message TouchEvent {
  // A unique id to represent a pointer. Ids can be reused. Ids are shared amongst all connections.
  uint32 identifier = 1;

  // Coords
  uint32 x = 2;
  uint32 y = 3;

  // Pointer device. A pressure of 0 must be sent to signal the event of the touch.
  uint32 pressure = 4;
  int32 touch_major = 5;
  int32 touch_minor = 6;
}

// An input message to the shell.
message ShellRequest {
  oneof message {
    ShellStartRequest start = 1;
    ShellStdInRequest stdin = 2;
    ShellResizeRequest resize = 3;
  }
}

// Requests the given command is spawned.
message ShellStartRequest {
  enum ShellType {
    // Do not spawn a PTY
    RAW = 0;
    // Spawn a PTY
    PTY = 1;
  }

  // Shell type
  ShellType shell_type = 1;

  // The command to execute.
  // Specify no command to spawn an interactive shell.
  optional string command = 2;

  // The "TERM=" environment value.
  optional string term_type = 3;
}

// Feeds data into the stdin stream of the shell.
message ShellStdInRequest {
  // The raw blob to feed in.
  bytes data = 1;
  // Whether to close the stdin after this blob.
  bool close = 2;
}

// Notifies the shell that the screen has changed size.
message ShellResizeRequest {
  // Characters
  uint32 rows = 1;
  uint32 cols = 2;

  // Pixels
  uint32 width = 3;
  uint32 height = 4;
}

// An output message from the shell.
message ShellResponse {
  oneof message {
    ShellOutputResponse output = 1;
    ShellExitResponse exit = 2;
  }
}

// The output from a shell.
message ShellOutputResponse {
  enum ShellOutputChannel {
    // Stdout
    OUT = 0;
    // Stderr
    ERR = 1;
  }

  // The channel.
  ShellOutputChannel channel = 1;

  // The raw blob.
  bytes data = 2;
}

// A notification that the shell has terminated.
message ShellExitResponse {
  // The exit code.
  uint32 code = 1;
}

// A directory listing request
message ListDirectoryRequest {
  // The directory path to list files in.
  string path = 1;
}

// A directory listing response.
message ListDirectoryResponse {
  repeated ListDirectoryEntry entries = 1;
}

// A entry in a directory listing.
message ListDirectoryEntry {
  // The entry name.
  string name = 1;

  // Stat of the file.
  oneof stat {
    uint32 stat_error = 2;
    FileStat stat_value = 3;
  }
}

message FileStat {
  uint64 dev = 1;
  uint64 ino = 2;
  uint32 mode = 3;
  uint32 nlink = 4;
  uint32 uid = 5;
  uint32 gid = 6;
  uint64 size = 7;
  int64 atime = 8;
  int64 mtime = 9;
  int64 ctime = 10;
}

// A file stat request.
message StatFileRequest {
  // The file to stat.
  string path = 1;

  // Whether to follow links.
  bool follow_links = 2;
}

// A file stat response.
message StatFileResponse {
  oneof stat {
    uint32 stat_error = 1;
    FileStat stat_value = 2;
  }
}

// A file pull request.
message PullFileRequest {
  // The file path to pull.
  string path = 1;
}

// A file pull response.
message PullFileResponse {
  // Raw bytes from the file.
  bytes data = 1;

  // Whether the end oof the file has been reached.
  bool last = 2;
}

// A file push request.
message PushFileRequest {
  oneof message {
    PushFileStartRequest start = 1;
    PushFileDataRequest data = 2;
    PushFileEndRequest end = 3;
  }
}

// A file push start request.
message PushFileStartRequest {
  // The file path to write to.
  string path = 1;

  // The mode to create the file with.
  uint32 mode = 2;
}

// A file push data request.
message PushFileDataRequest {
  // Data to write to the file.
  bytes data = 1;
}

// A file push end request.
message PushFileEndRequest {
  // The modified time to set.
  uint32 mtime = 1;
}
